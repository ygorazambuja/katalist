# Katalist - TypeScript HTTP Client with Automatic Schema Generation

## Project Overview
Katalist is a TypeScript library that simplifies HTTP client development by automatically generating Zod schemas from API responses. It provides a fluent API for making HTTP requests while handling type safety and schema generation.

## Core Functionality
- **HTTP Client Wrapper**: `katalist()` returns an object with HTTP methods (`get`, etc.)
- **Automatic Schema Generation**: Intercepts API responses and generates Zod schemas
- **Code Transformation**: Uses AST manipulation to add types and clean up generated code
- **Bun-First Architecture**: Built specifically for Bun runtime using its native APIs

## Key Technologies
- **Bun**: Runtime, build tool, and file operations
- **TypeScript**: Type safety and development
- **Zod**: Runtime type validation schemas
- **ts-morph**: AST manipulation for code transformation
- **Biome**: Code formatting and linting
- **Ky**: Lightweight HTTP client
- **generate-schema + json-schema-to-zod**: Automatic schema generation pipeline

## Development Workflow
1. **Schema Generation**: Use `generateSchema: true` and `interfaceName` in HTTP calls
2. **Automatic Processing**: Library intercepts responses and generates schemas
3. **Code Transformation**: AST manipulation adds types and removes temporary options
4. **Production Ready**: Transformed code is clean and type-safe

## Code Style Guidelines
- **Bun APIs Only**: Use `Bun.file`, `Bun.serve`, `Bun.build`, etc. Never Node.js alternatives
- **TypeScript Strict**: Full type safety with Zod schemas
- **Biome Formatting**: 2-space indentation, double quotes, tabs for indentation
- **ES Modules**: Use ESM imports/exports throughout
- **No Comments**: Code should be self-documenting

## Common Patterns
```typescript
// Schema generation during development
const kat = katalist();
const response = await kat.get(url, {
  generateSchema: true,
  interfaceName: "User"
});

// Production code (after transformation)
const response = await kat.get<UserSchemaType>(url);
```

## Build & Run
- `bun run build`: Build to dist/ with CJS and ESM outputs
- `bun run index.ts`: Run the main entry point
- `bun install`: Install dependencies
- `bun test`: Run tests

## Project Structure
- `src/katalist.ts`: Main HTTP client API
- `src/jsonToZodSchema.ts`: Schema generation utilities
- `src/transformer.ts`: AST manipulation and code transformation
- `http-schemas/`: Generated Zod schema files
- `dist/`: Built distribution files

## Architecture Principles
- **Zero-Runtime Overhead**: Schema generation happens at development time
- **Type-First**: All HTTP calls are fully typed
- **Automatic**: Minimal developer intervention required
- **Bun Native**: Leverages Bun's performance and APIs
